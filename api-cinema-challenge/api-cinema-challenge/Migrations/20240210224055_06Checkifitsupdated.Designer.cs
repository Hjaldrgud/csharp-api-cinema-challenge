// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20240210224055_06Checkifitsupdated")]
    partial class _06Checkifitsupdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4889),
                            Email = "ginger.hendrix@gov.us",
                            Name = "Ginger Hendrix",
                            Phone = "64 68 94 16",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4893)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4902),
                            Email = "oprah.trump@tesla.com",
                            Name = "Oprah Trump",
                            Phone = "92 98 63 32",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4902)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4907),
                            Email = "audrey.hepburn@something.com",
                            Name = "Audrey Hepburn",
                            Phone = "40 09 67 48",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4908)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4915),
                            Email = "keith.may@tesla.com",
                            Name = "Keith May",
                            Phone = "43 46 49 19",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4915)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4920),
                            Email = "roger.moon@gov.gr",
                            Name = "Roger Moon",
                            Phone = "73 76 80 91",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4921)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4927),
                            Email = "charlie.watts@gov.nl",
                            Name = "Charlie Watts",
                            Phone = "95 67 88 43",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4927)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4936),
                            Email = "donald.iommi@bbc.co.uk",
                            Name = "Donald Iommi",
                            Phone = "41 99 23 26",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4936)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4943),
                            Email = "tony.obama@gov.us",
                            Name = "Tony Obama",
                            Phone = "67 19 79 17",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4943)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4948),
                            Email = "brian.dio@gov.us",
                            Name = "Brian Dio",
                            Phone = "43 55 14 61",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4948)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4954),
                            Email = "bill.may@gov.us",
                            Name = "Bill May",
                            Phone = "86 60 40 71",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4954)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("Runtime")
                        .HasColumnType("integer")
                        .HasColumnName("runtime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4960),
                            Description = "The story of Henry Hill and his life in the mafia, covering his relationship with his wife Karen and his mob partners Jimmy Conway and Tommy DeVito.",
                            Rating = "R",
                            Runtime = 148,
                            Title = "Goodfellas",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4962)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4963),
                            Description = "In 1980 Miami, a determined Cuban immigrant takes over a drug cartel and succumbs to greed.",
                            Rating = "R",
                            Runtime = 170,
                            Title = "Scarface",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4964)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4965),
                            Description = "A family in 1630s New England is torn apart by the forces of witchcraft, black magic and possession.",
                            Rating = "R",
                            Runtime = 93,
                            Title = "The VVitch: A New-England Folktale",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4966)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4967),
                            Description = "Vampire Count Orlok expresses interest in a new residence and real estate agent Hutter's wife.",
                            Rating = "Not Rated",
                            Runtime = 94,
                            Title = "Nosferatu",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4967)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4968),
                            Description = "When a cockerel apparently flies into a chicken farm, the chickens see him as an opportunity to escape their evil owners.",
                            Rating = "G",
                            Runtime = 84,
                            Title = "Chicken Run",
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4969)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_movie_id");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screen_number");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 186,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4987),
                            MovieId = 4,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 11, 3, 40, 55, 146, DateTimeKind.Utc).AddTicks(4980),
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4988)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 67,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4992),
                            MovieId = 5,
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 2, 11, 3, 40, 55, 146, DateTimeKind.Utc).AddTicks(4991),
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4992)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 173,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4993),
                            MovieId = 5,
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 2, 11, 2, 40, 55, 146, DateTimeKind.Utc).AddTicks(4993),
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4994)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 201,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4995),
                            MovieId = 1,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 11, 2, 40, 55, 146, DateTimeKind.Utc).AddTicks(4994),
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(4995)
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 65,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5026),
                            MovieId = 1,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 11, 3, 40, 55, 146, DateTimeKind.Utc).AddTicks(5025),
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5027)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_customer_id");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_seats");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_screening_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5042),
                            CustomerId = 2,
                            NumSeats = 0,
                            ScreeningId = 1,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5044)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5047),
                            CustomerId = 4,
                            NumSeats = 0,
                            ScreeningId = 5,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5047)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5048),
                            CustomerId = 6,
                            NumSeats = 0,
                            ScreeningId = 1,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5048)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5049),
                            CustomerId = 6,
                            NumSeats = 0,
                            ScreeningId = 1,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5049)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5050),
                            CustomerId = 10,
                            NumSeats = 0,
                            ScreeningId = 2,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5050)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5052),
                            CustomerId = 8,
                            NumSeats = 0,
                            ScreeningId = 5,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5052)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5053),
                            CustomerId = 5,
                            NumSeats = 0,
                            ScreeningId = 1,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5053)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5054),
                            CustomerId = 8,
                            NumSeats = 0,
                            ScreeningId = 4,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5054)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5055),
                            CustomerId = 10,
                            NumSeats = 0,
                            ScreeningId = 1,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5055)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5057),
                            CustomerId = 5,
                            NumSeats = 0,
                            ScreeningId = 4,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5057)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5058),
                            CustomerId = 5,
                            NumSeats = 0,
                            ScreeningId = 2,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5058)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5059),
                            CustomerId = 7,
                            NumSeats = 0,
                            ScreeningId = 5,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5059)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5060),
                            CustomerId = 4,
                            NumSeats = 0,
                            ScreeningId = 2,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5060)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5061),
                            CustomerId = 8,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5061)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5062),
                            CustomerId = 3,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5062)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5063),
                            CustomerId = 10,
                            NumSeats = 0,
                            ScreeningId = 4,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5063)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5064),
                            CustomerId = 6,
                            NumSeats = 0,
                            ScreeningId = 4,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5064)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5065),
                            CustomerId = 1,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5066)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5066),
                            CustomerId = 10,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5066)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5067),
                            CustomerId = 3,
                            NumSeats = 0,
                            ScreeningId = 2,
                            UpdatedAt = new DateTime(2024, 2, 10, 22, 40, 55, 146, DateTimeKind.Utc).AddTicks(5067)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", null)
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
