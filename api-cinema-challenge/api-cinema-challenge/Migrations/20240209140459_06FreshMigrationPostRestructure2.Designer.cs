// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20240209140459_06FreshMigrationPostRestructure2")]
    partial class _06FreshMigrationPostRestructure2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3904),
                            Email = "mick.baker@theworld.ca",
                            Name = "Mick Baker",
                            Phone = "81 96 00 67",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3906)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3913),
                            Email = "kate.winslet@gov.gr",
                            Name = "Kate Winslet",
                            Phone = "43 48 09 95",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3914)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3918),
                            Email = "geezer.ward@theworld.ca",
                            Name = "Geezer Ward",
                            Phone = "94 64 22 91",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3918)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3922),
                            Email = "kate.dio@gov.nl",
                            Name = "Kate Dio",
                            Phone = "43 79 01 38",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3923)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3927),
                            Email = "jimi.trump@gov.gr",
                            Name = "Jimi Trump",
                            Phone = "90 99 19 52",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3928)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3933),
                            Email = "ronnie.jagger@gov.gr",
                            Name = "Ronnie Jagger",
                            Phone = "76 27 10 36",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3933)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3937),
                            Email = "roger.winslet@bbc.co.uk",
                            Name = "Roger Winslet",
                            Phone = "82 15 13 30",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3937)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3941),
                            Email = "geezer.winfrey@gov.us",
                            Name = "Geezer Winfrey",
                            Phone = "45 24 88 28",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3941)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3945),
                            Email = "mick.may@google.com",
                            Name = "Mick May",
                            Phone = "94 79 08 01",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3946)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3950),
                            Email = "audrey.iommi@bbc.co.uk",
                            Name = "Audrey Iommi",
                            Phone = "77 75 91 68",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3950)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("Runtime")
                        .HasColumnType("integer")
                        .HasColumnName("runtime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3956),
                            Description = "The story of Henry Hill and his life in the mafia, covering his relationship with his wife Karen and his mob partners Jimmy Conway and Tommy DeVito.",
                            Rating = "R",
                            Runtime = 148,
                            Title = "Goodfellas",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3956)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3958),
                            Description = "In 1980 Miami, a determined Cuban immigrant takes over a drug cartel and succumbs to greed.",
                            Rating = "R",
                            Runtime = 170,
                            Title = "Scarface",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3958)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3959),
                            Description = "A family in 1630s New England is torn apart by the forces of witchcraft, black magic and possession.",
                            Rating = "R",
                            Runtime = 93,
                            Title = "The VVitch: A New-England Folktale",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3960)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3961),
                            Description = "Vampire Count Orlok expresses interest in a new residence and real estate agent Hutter's wife.",
                            Rating = "Not Rated",
                            Runtime = 94,
                            Title = "Nosferatu",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3961)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3963),
                            Description = "When a cockerel apparently flies into a chicken farm, the chickens see him as an opportunity to escape their evil owners.",
                            Rating = "G",
                            Runtime = 84,
                            Title = "Chicken Run",
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3963)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_movie_id");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screen_number");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 119,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3977),
                            MovieId = 1,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 9, 18, 4, 58, 915, DateTimeKind.Utc).AddTicks(3970),
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3977)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 195,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3979),
                            MovieId = 3,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 9, 18, 4, 58, 915, DateTimeKind.Utc).AddTicks(3979),
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3979)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 176,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3980),
                            MovieId = 1,
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 2, 9, 17, 4, 58, 915, DateTimeKind.Utc).AddTicks(3980),
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3981)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 112,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3981),
                            MovieId = 4,
                            ScreenNumber = 3,
                            StartsAt = new DateTime(2024, 2, 9, 18, 4, 58, 915, DateTimeKind.Utc).AddTicks(3981),
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3982)
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 50,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3983),
                            MovieId = 3,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 9, 19, 4, 58, 915, DateTimeKind.Utc).AddTicks(3982),
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3983)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_customer_id");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_seats");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_screening_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3987),
                            CustomerId = 8,
                            NumSeats = 0,
                            ScreeningId = 5,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3987)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3989),
                            CustomerId = 10,
                            NumSeats = 0,
                            ScreeningId = 4,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3989)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3990),
                            CustomerId = 1,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3990)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3991),
                            CustomerId = 1,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3991)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3992),
                            CustomerId = 4,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3992)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3993),
                            CustomerId = 8,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3993)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3994),
                            CustomerId = 2,
                            NumSeats = 0,
                            ScreeningId = 2,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3994)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3995),
                            CustomerId = 4,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3995)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3996),
                            CustomerId = 10,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3996)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3997),
                            CustomerId = 2,
                            NumSeats = 0,
                            ScreeningId = 5,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3997)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3998),
                            CustomerId = 2,
                            NumSeats = 0,
                            ScreeningId = 5,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3998)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3998),
                            CustomerId = 7,
                            NumSeats = 0,
                            ScreeningId = 4,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3998)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3999),
                            CustomerId = 1,
                            NumSeats = 0,
                            ScreeningId = 5,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(3999)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4000),
                            CustomerId = 5,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4000)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4001),
                            CustomerId = 10,
                            NumSeats = 0,
                            ScreeningId = 2,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4001)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4029),
                            CustomerId = 10,
                            NumSeats = 0,
                            ScreeningId = 1,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4029)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4030),
                            CustomerId = 1,
                            NumSeats = 0,
                            ScreeningId = 5,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4030)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4032),
                            CustomerId = 7,
                            NumSeats = 0,
                            ScreeningId = 4,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4032)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4032),
                            CustomerId = 6,
                            NumSeats = 0,
                            ScreeningId = 3,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4033)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4033),
                            CustomerId = 2,
                            NumSeats = 0,
                            ScreeningId = 5,
                            UpdatedAt = new DateTime(2024, 2, 9, 14, 4, 58, 915, DateTimeKind.Utc).AddTicks(4033)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", null)
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
